"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LocalStorage = exports.LocalKey = void 0;
// NOTE: Keep these comments in sync with Storage:
// @ts-ignore
const _ = undefined;
class LocalStorageAssertionError extends Error {
    constructor(message) {
        super(message);
        this.name = 'LocalStorageAssertionError';
    }
}
/** T is the type that you store/retrieve from localStorage.
 *
 * Basic usage:
 * ```ts
 * const mykey = new LocalKey("myKey", false);
 * LocalStorage.get(mykey) -> boolean | null
 * LocalStorage.set(mykey, "not a boolean") -> error
 * ```
 * More info: https://www.npmjs.com/package/ts-localstorage
 */
class LocalKey {
    constructor(
    /** The key name to be used in the native localStorage. */
    key, 
    /**
     * This is necessary to enable runtime checks and conversions.
     * It is not used for anything else unless you enable
     * `hasDefaultValue`
     */
    sampleValue, 
    /** Additional parameters. */
    params) {
        var _a;
        this.key = key;
        this.sampleValue = sampleValue;
        this.hasDefaultValue = false;
        this.hasCustomConverter = false;
        this.toStorage = (value) => {
            const type = typeof this.sampleValue;
            if (type === "boolean")
                return value.toString();
            if (type === "number")
                return value.toString();
            if (type === "string")
                return value;
            if (this.sampleValue instanceof String) {
                return value.toString();
            }
            if (this.sampleValue instanceof Map) {
                return JSON.stringify([...value]);
            }
            if (this.sampleValue instanceof Date) {
                return value.toISOString();
            }
            // Use stringify() as a last resort.
            return JSON.stringify(value);
        };
        this.fromStorage = (value) => {
            const type = typeof this.sampleValue;
            if (type === "boolean")
                return JSON.parse(value.toLowerCase());
            if (type === "number")
                return parseFloat(value);
            if (type === "string")
                return value;
            if (this.sampleValue instanceof Boolean)
                return new Boolean(value);
            if (this.sampleValue instanceof Number)
                return new Number(value);
            if (this.sampleValue instanceof String)
                return new String(value);
            if (this.sampleValue instanceof Map) {
                return new Map(JSON.parse(value));
            }
            if (this.sampleValue instanceof Date) {
                return new Date(value);
            }
            // Use parse() as a last resort.
            return JSON.parse(value);
        };
        assert(typeof sampleValue !== "function", "Serializing functions to localStorage is forbidden since you could only get them back using eval().");
        this.hasDefaultValue = (_a = params === null || params === void 0 ? void 0 : params.hasDefaultValue) !== null && _a !== void 0 ? _a : this.hasDefaultValue;
        const paramsWithConverter = params;
        const hasToStorage = (paramsWithConverter === null || paramsWithConverter === void 0 ? void 0 : paramsWithConverter.toStorage) !== undefined;
        const hasFromStorage = (paramsWithConverter === null || paramsWithConverter === void 0 ? void 0 : paramsWithConverter.toStorage) !== undefined;
        assert(hasToStorage === hasFromStorage, "Either both or none of toStorage and fromStorage must be defined.");
        if ((paramsWithConverter === null || paramsWithConverter === void 0 ? void 0 : paramsWithConverter.toStorage) !== undefined) {
            this.toStorage = paramsWithConverter.toStorage;
        }
        if ((paramsWithConverter === null || paramsWithConverter === void 0 ? void 0 : paramsWithConverter.fromStorage) !== undefined) {
            this.fromStorage = paramsWithConverter.fromStorage;
        }
    }
}
exports.LocalKey = LocalKey;
/**
 * Sets the value of the pair identified by key to value, creating a new key/value pair if none existed for key previously.
 *
 * Throws a "QuotaExceededError" DOMException exception if the new value couldn't be set. (Setting could fail if, e.g., the user has disabled storage for the site, or if the quota has been exceeded.)
 */
function setItem(key, value) {
    if (value === null || value === undefined) {
        exports.LocalStorage.removeItem(key);
        return;
    }
    const stringified = key.toStorage(value);
    return localStorage.setItem(key.key, stringified);
}
/**
 * Returns the current value associated with the given key, or null if the given key does not exist in the list associated with the object.
 */
function getItem(key) {
    const result = localStorage.getItem(key.key);
    if (result === null || result === undefined) {
        if (key.hasDefaultValue)
            return key.sampleValue;
        return null;
    }
    ;
    return key.fromStorage(result);
}
/**
 * Removes the key/value pair with the given key from the list associated with the object, if a key/value pair with the given key exists.
 */
function removeItem(key) {
    return localStorage.removeItem(key.key);
}
/**
 * Empties the list associated with the object of all key/value pairs, if there are any.
 */
function clear() {
    return localStorage.clear();
}
/**
 * Returns the name of the nth key in the list, or null if n is greater than or equal to the number of key/value pairs in the object.
 */
function key(index, defaultValue) {
    const key = localStorage.key(index);
    if (key === null)
        return null;
    return new LocalKey(key, defaultValue);
}
/**
 * Returns the number of key/value pairs currently present in the list associated with the object.
 */
function length() {
    return localStorage.length;
}
/**
 * Wrapper around console.assert() that also throws.
 * @param check The assertion that should be true.
 * @param message The error message if the assertion fails.
 */
function assert(check, message) {
    console.assert(check, message);
    if (!check)
        throw new LocalStorageAssertionError(message);
}
exports.LocalStorage = { setItem, getItem, removeItem, clear, key, length };
