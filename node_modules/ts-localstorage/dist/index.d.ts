interface LocalKeyParams<T = unknown> {
    /**
     * If true, the `sampleValue` will be used as the default value
     * if the key is not found in localStorage.
     *
     * If false, the `sampleValue` will be ignored.
     * Defaults to false.
     */
    hasDefaultValue?: boolean;
    /**
     * Custom converter to serialize objects stored in the localStorage.
     */
    toStorage?: (value: T) => string;
    /**
     * Custom converter to deserialize objects stored in the localStorage.
     */
    fromStorage?: (value: string) => T;
}
/** T is the type that you store/retrieve from localStorage.
 *
 * Basic usage:
 * ```ts
 * const mykey = new LocalKey("myKey", false);
 * LocalStorage.get(mykey) -> boolean | null
 * LocalStorage.set(mykey, "not a boolean") -> error
 * ```
 * More info: https://www.npmjs.com/package/ts-localstorage
 */
export declare class LocalKey<T = unknown> {
    /** The key name to be used in the native localStorage. */
    readonly key: string;
    /**
     * This is necessary to enable runtime checks and conversions.
     * It is not used for anything else unless you enable
     * `hasDefaultValue`
     */
    readonly sampleValue: T | null;
    readonly hasDefaultValue: boolean;
    readonly hasCustomConverter: boolean;
    constructor(
    /** The key name to be used in the native localStorage. */
    key: string, 
    /**
     * This is necessary to enable runtime checks and conversions.
     * It is not used for anything else unless you enable
     * `hasDefaultValue`
     */
    sampleValue: T | null, 
    /** Additional parameters. */
    params?: LocalKeyParams<T>);
    readonly toStorage: (value: T) => string;
    readonly fromStorage: (value: string) => T;
}
/**
 * Sets the value of the pair identified by key to value, creating a new key/value pair if none existed for key previously.
 *
 * Throws a "QuotaExceededError" DOMException exception if the new value couldn't be set. (Setting could fail if, e.g., the user has disabled storage for the site, or if the quota has been exceeded.)
 */
declare function setItem<T>(key: LocalKey<T>, value: T | null | undefined): void;
/**
 * Returns the current value associated with the given key, or null if the given key does not exist in the list associated with the object.
 */
declare function getItem<T>(key: LocalKey<T>): T | null;
/**
 * Removes the key/value pair with the given key from the list associated with the object, if a key/value pair with the given key exists.
 */
declare function removeItem(key: LocalKey<any>): void;
/**
 * Empties the list associated with the object of all key/value pairs, if there are any.
 */
declare function clear(): void;
/**
 * Returns the name of the nth key in the list, or null if n is greater than or equal to the number of key/value pairs in the object.
 */
declare function key<T = unknown>(index: number, defaultValue: T): LocalKey<T> | null;
/**
 * Returns the number of key/value pairs currently present in the list associated with the object.
 */
declare function length(): number;
export declare const LocalStorage: {
    setItem: typeof setItem;
    getItem: typeof getItem;
    removeItem: typeof removeItem;
    clear: typeof clear;
    key: typeof key;
    length: typeof length;
};
export {};
